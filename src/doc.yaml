openapi: '3.0.2'
info:
  title: Documentación de API rest de noticias
  version: '1.0'
servers:
  - url: http://localhost:8080
tags:
  - name: usuario
    description: Documentacion de las URL's de usuario
    externalDocs:
      url: http://localhost:8080
  - name: categoria
    description: Documentacion de las URL's de categoria
    externalDocs:
      url: http://localhost:8080
  - name: subcategoria
    description: Documentacion de las URL's de subcategoria
    externalDocs:
      url: http://localhost:8080
  - name: noticia
    externalDocs:
      url: http://localhost:8080

paths:
  /api/register/admi:
    post:
      tags:
        - usuario
      summary: Crear nuevo escritor
      requestBody:
        description: Nombre de las variables requeridas para crear escritor
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  description: Nombre del escritor
                  example: Mauricio
                apellido:
                  type: string
                  description: Apellido del escritor
                  example: Gonzalez Marquez
                correo:
                  type: string
                  description: Correo para iniciar sesion
                  example: mauricio@gmail.com
                password:
                  type: string
                  description: Contraseña que tendra el usuario
                  example: 123
                rolID:
                  type: integer
                  description: lleve foranea para saber si es lector o escritor
                  example: 1
      responses:
        200:
          description: Nuevo escritor creado
        403:
          description: Bad request. Token invalido
        409:
          description: Correo ya existente
        503:
          description: Servicio no disponible
  /api/register:
    post:
      tags:
        - usuario
      summary: Crear nuevo escritor
      requestBody:
        description: Nombre de las variables requeridas para crear escritor
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  description: Nombre del escritor
                  example: Mauricio
                apellido:
                  type: string
                  description: Apellido del escritor
                  example: Gonzalez Marquez
                correo:
                  type: string
                  description: Correo para iniciar sesion
                  example: mauricio@gmail.com
                password:
                  type: string
                  description: Contraseña que tendra el usuario
                  example: 123
                rolID:
                  type: integer
                  description: lleve foranea para saber si es lector o escritor
                  example: 3
      responses:
        201:
          description: Nuevo escritor creado
        409:
          description: Bad request. Correo ya existe
        503:
          description: Servicio no disponible
  /api/update/{id}:
    put:
      tags:
        - usuario
      summary: Actualizar datos de un usuario
      parameters:
        - name: id
          in: path
          required: true
          description: Identificador del usuario a actualizar
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  description: Nombre del usuario
                apellido:
                  type: string
                  description: Apellido del usuario
                correo:
                  type: string
                  description: Correo electrónico del usuario
                password:
                  type: string
                  description: Contraseña del usuario
                rolID:
                  type: integer
                  description: Identificador del rol del usuario
              required:
                - correo
                - password
                - rolID
      responses:
        200:
          description: Actualizado exitosamente
        400:
          description: Rol inválido
        403:
          description: Token inválido
        404:
          description: Usuario no encontrado
        503:
          description: Servicio no disponible
  /api/delete/escritor/{id}:
    delete:
      tags:
        - usuario
      summary: Borrar un escritor
      parameters:
        - name: id
          in: path
          required: true
          description: Identificador del escritor a borrar
          schema:
            type: integer
      responses:
        200:
          description: Escritor borrado exitosamente
        403:
          description: Error en el token
        404:
          description: Usuario no encontrado
        503:
          description: Error en el servidor
  /api/find/escritor/{id}:
    get:
      tags:
        - usuario

      summary: Buscar un escritor por ID
      parameters:
        - name: id
          in: path
          required: true
          description: Identificador del escritor a buscar
          schema:
            type: integer
      responses:
        200:
          description: Datos del escritor encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Identificador del escritor
                  nombre:
                    type: string
                    description: Nombre del escritor
                  correo:
                    type: string
                    description: Correo electrónico del escritor

        403:
          description: Error en el token
        404:
          description: Usuario no encontrado
        500:
          description: Error en el servidor
  /api/login:
    post:
      tags:
        - usuario
      summary: Crear nuevo escritor
      requestBody:
        description: Nombre de las variables requeridas para crear escritor
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                correo:
                  type: string
                  description: Correo para iniciar sesion
                  example: mauricio@gmail.com
                password:
                  type: string
                  description: Contraseña que tendra el usuario
                  example: 123
      responses:
        201:
          description: Nuevo escritor creado
        409:
          description: Bad request. Correo ya existe
        503:
          description: Servicio no disponible
  /api/escritor:
    get:
      tags:
        - usuario
      summary: Listado de escritores registrados
      responses:
        200:
          description: Lista de usuario
  /api/categorias:
    get:
      tags:
        - categoria
      summary: Listado de categorias
      responses:
        200:
          description: Lista de categorias
  /api/buscar:
    get:
      tags:
        - categoria
      parameters:
        - name: query
          in: query
          description: Término de búsqueda
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token de autorización JWT
          required: true
          schema:
            type: string
      responses:
        200:
          description: Categorías encontradas con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  categoria:
                    type: array
                    items:
                      type: object # Define aquí las propiedades de una categoría
        401:
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: No se encontraron categorías
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Error en el servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/crear/categoria:
    post:
      summary: Crear nueva categoría
      description: Crea una nueva categoría con el nombre proporcionado.
      tags:
        - categoria
      requestBody:
        description: Datos de la nueva categoría
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Nuevacategoria:
                  type: string
                  example: nacional
      responses:
        200:
          description: Categoría creada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Error en el servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /actualizar/categoria:
    put:
      summary: Actualizar categoría
      description: Actualiza una categoría existente según el ID proporcionado.
      tags:
        - categoria
      parameters:
        - name: id
          in: query
          description: ID de la categoría a actualizar
          required: true
          schema:
            type: integer
      requestBody:
        description: Datos de la categoría actualizada
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  example: 3
                Nuevacategoria:
                  type: string
                  example: nacional
                # Define aquí las propiedades que se pueden actualizar
      responses:
        200:
          description: Categoría actualizada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Categoría no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Error en el servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/borrar/categoria/{id}:
    delete:
      summary: Borrar categoría
      description: Borra una categoría existente según el ID proporcionado.
      tags:
        - categoria
      parameters:
        - name: id
          in: path
          description: ID de la categoría a borrar
          required: true
          schema:
            type: integer
            example: 11
      responses:
        200:
          description: Categoría borrada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Categoría no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Error en el servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/subcategoria:
    get:
      summary: Obtener lista de subcategoria
      description: Obtiene la lista de subcategoria disponibles en orden ascendente por ID.
      tags:
        - subcategoria
      responses:
        200:
          description: Lista de subcategoria obtenida con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  subcategoria:
                    type: array
                    items:
                      type: object
                      properties:
                        subcategoria:
                          type: string
                          example: medico
        403:
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Error en el servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/buscar/subcategoria:
    get:
      summary: Buscar subcategoria
      description: Busca subcategoria que coincidan con un término de búsqueda.
      tags:
        - subcategoria
      parameters:
        - name: q
          in: query
          description: Término de búsqueda
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token de autorización JWT
          required: true
          schema:
            type: string
      responses:
        200:
          description: subcategoria encontradas con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  subcategoria:
                    type: array
                    items:
                      type: object
                      properties:
                        subcategoría:
                          type: string
                          example: medico
                        # Define aquí las propiedades de una subcategoría
        401:
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: No se encontraron subcategoria
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Error en el servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/actualizar/subcategoria:
    put:
      summary: Actualizar subcategoría
      description: Actualiza una subcategoría existente según el ID proporcionado.
      tags:
        - subcategoria
      requestBody:
        description: Datos de la subcategoría actualizada
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ID de la subcategoría a actualizar
                # Define aquí las propiedades que se pueden actualizar
      responses:
        200:
          description: Subcategoría actualizada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Subcategoría no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Error en el servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/borrar/subcategoria/{id}:
    delete:
      summary: Borrar subcategoría
      description: Borra una subcategoría existente según el ID proporcionado.
      tags:
        - subcategoria
      parameters:
        - name: id
          in: path
          description: ID de la subcategoría a borrar
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Subcategoría borrada con éxito
        401:
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Subcategoría no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Error en el servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /crear/subcategoria:
    post:
      summary: Crear nueva subcategoría
      description: Crea una nueva subcategoría con el nombre proporcionado.
      tags:
        - subcategoria
      requestBody:
        description: Datos de la nueva subcategoría
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subcategoria:
                  type: string
      responses:
        201:
          description: Subcategoría creada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Error en el servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/registrar/nota:
    post:
      summary: Crea una nueva nota periodística.
      description: >
        Esta ruta te permite crear una nueva nota periodística y asociar imágenes a ella.
      tags:
        - noticia
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                titulo:
                  type: string
                  description: Título de la nota.
                descripcion:
                  type: string
                  description: Cuerpo de la nota.
                categoriaID:
                  type: integer
                  description: ID de la categoría de la nota.
                subcategoriaID:
                  type: integer
                  description: ID de la subcategoría de la nota.
                rol:
                  type: string
                  description: Rol del usuario autenticado.
                images:
                  type: array
                  items:
                    type: string
                  description: Archivos de imagen a asociar con la nota.
      responses:
        '201':
          description: Nota creada exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de éxito.
        '500':
          description: Error del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error.
  /api/noticias:
    get:
      summary: Obtiene una lista de notas periodísticas.
      description: >
        Esta ruta te permite obtener una lista de todas las notas periodísticas existentes.
      tags:
        - noticia
      responses:
        '200':
          description: Lista de notas periodísticas.
          content:
            application/json:
              schema:
                type: object
                properties:
                  noticias:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: ID de la nota.
                        titulo:
                          type: string
                          description: Título de la nota.
                        descripcion:
                          type: string
                          description: Cuerpo de la nota.
                        categoria:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: ID de la categoría de la nota.
                            nombre:
                              type: string
                              description: Nombre de la categoría de la nota.
                        subcategoria:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: ID de la subcategoría de la nota.
                            nombre:
                              type: string
                              description: Nombre de la subcategoría de la nota.
                        items:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                description: ID del ítem asociado a la nota.
                              nombre:
                                type: string
                                description: Nombre del ítem asociado a la nota.
        '500':
          description: Error del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error.
  /api/actualizar/nota/{id}:
    put:
      tags:
        - noticia
      summary: Actualizar una nota por ID
      description: Actualiza una nota existente identificada por su ID.
      parameters:
        - in: path
          name: id
          description: ID de la nota que se va a actualizar
          required: true
          schema:
            type: integer
        - in: header
          name: Authorization
          description: Token de autorización JWT
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                rol:
                  type: string
                  description: Rol del usuario
      responses:
        '200':
          description: Nota actualizada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de éxito
        '401':
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error
        '404':
          description: Nota no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error del servidor
  /api/borrar/noticia/{id}/{rol}:
    delete:
      tags:
        - noticia
      summary: Eliminar una nota por ID
      description: Elimina una nota existente identificada por su ID.
      parameters:
        - in: path
          name: id
          description: ID de la nota que se va a eliminar
          required: true
          schema:
            type: integer
        - in: path
          name: rol
          description: Rol del usuario
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Token de autorización JWT
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Nota eliminada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de éxito
        '401':
          description: Se requiere autorización
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error de autorización
        '404':
          description: Noticia no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error del servidor
  /api/noticia/{id}:
    get:
      tags:
        - noticia
      summary: Obtener una nota periodística por ID
      description: >
        Obtiene los detalles de una nota periodística específica por su ID, incluyendo sus imágenes, categoría, subcategoría y comentarios.
      parameters:
        - in: path
          name: id
          required: true
          description: ID de la nota periodística que se va a obtener
          schema:
            type: integer
      responses:
        '200':
          description: Detalles de la nota periodística encontrados con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  noticia:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: ID de la nota periodística.
                      titulo:
                        type: string
                        description: Título de la nota periodística.
                      descripcion:
                        type: string
                        description: Cuerpo de la nota periodística.
                      categoria:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: ID de la categoría de la nota periodística.
                          nombre:
                            type: string
                            description: Nombre de la categoría de la nota periodística.
                      subcategoria:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: ID de la subcategoría de la nota periodística.
                          nombre:
                            type: string
                            description: Nombre de la subcategoría de la nota periodística.
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: ID del ítem asociado a la nota periodística.
                            nombre:
                              type: string
                              description: Nombre del ítem asociado a la nota periodística.
                      comentarios:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: ID del comentario.
                            texto:
                              type: string
                              description: Texto del comentario.
                            fecha:
                              type: string
                              format: date-time
                              description: Fecha y hora del comentario.
        '404':
          description: Nota periodística no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error indicando que la nota periodística no se encontró.
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de error del servidor.